// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Supported currencies enum
enum Currency {
  EGP // Egyptian Pound
  USD // US Dollar
  GOLD // Gold (grams)
}

// User model for WebAuthn authentication
model User {
  id           String   @id @default(cuid())
  email        String   @unique @db.VarChar(255)
  name         String?  @db.VarChar(100)
  baseCurrency Currency @default(EGP)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  credentials       Credential[]       @relation("UserCredentials")
  transactions      Transaction[]      @relation("UserTransactions")
  accounts          Account[]          @relation("UserAccounts")
  exchangeRates     ExchangeRate[]     @relation("UserExchangeRates")
  widgetPreferences WidgetPreference[] @relation("UserWidgetPreferences")
  Budget            Budget[]

  // Indexes
  @@index([email])
  // Map
  @@map("users")
}

// WebAuthn credential storage
model Credential {
  id           String   @id @default(cuid())
  userId       String
  credentialId Bytes    @unique
  publicKey    Bytes
  counter      BigInt
  transports   String[] // e.g., ["internal", "hybrid"]
  deviceName   String?  @db.VarChar(100) // e.g., "Face ID", "Touch ID"

  // Timestamps
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime  @default(now())
  deletedAt  DateTime? // Soft delete

  // Relationships
  user User @relation("UserCredentials", fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  // Map
  @@map("credentials")
}

model Account {
  id          String      @id @default(cuid())
  name        String
  description String?
  currency    Currency    @default(EGP)
  type        AccountType @default(asset)

  balance Decimal   @default(0)
  target  Decimal? // only used for goals
  dueDate DateTime? // only used for goals and debts

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  transactionsFrom Transaction[]   @relation("FromAccount")
  transactionsTo   Transaction[]   @relation("ToAccount")
  User             User            @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  BudgetAccount    BudgetAccount[]

  // Indexes
  @@index([userId])
  // Map
  @@map("accounts")
}

model Transaction {
  id           String   @id @default(cuid())
  description  String?
  amount       Decimal  @db.Decimal(18, 2)
  currency     Currency @default(EGP)
  exchangeRate Decimal? @db.Decimal(18, 6)
  date         DateTime @default(now())

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  fromAccount   Account @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  fromAccountId String
  toAccount     Account @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: Cascade)
  toAccountId   String
  User          User    @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  // Indexes
  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([userId])
  @@index([userId, date(sort: Desc)])
  @@index([userId, deletedAt, date(sort: Desc)])
  @@index([description])
  // Map
  @@map("transactions")
}

// Exchange rate storage for currency conversions
model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate         Decimal  @db.Decimal(18, 6) // High precision for exchange rates

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  user   User   @relation("UserExchangeRates", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Constraints: One rate per currency pair per user
  @@unique([userId, fromCurrency, toCurrency])
  // Indexes
  @@index([userId])
  @@index([userId, fromCurrency, toCurrency])
  // Map
  @@map("exchange_rates")
}

// Widget preferences for dashboard customization
model WidgetPreference {
  id       String  @id @default(cuid())
  widgetId String // e.g., "spending-trends", "alerts", "goals"
  visible  Boolean @default(true)
  order    Int     @default(0)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  user   User   @relation("UserWidgetPreferences", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Constraints: One preference per widget per user
  @@unique([userId, widgetId])
  // Indexes
  @@index([userId])
  @@index([userId, order])
  // Map
  @@map("widget_preferences")
}

// Account type enum
enum AccountType {
  asset // What you own (Cash, Bank, Wallet, Gold, Goal, Receivable)
  liability // What you owe (Loan, Credit Card, Debt)
  income // Sources of money (Salary, Investments, Freelance)
  expense // Spending categories (Groceries, Rent, Bills)
  equity // Starting capital or owner value (Opening Balance, Net Worth)
}

model Budget {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  amount    Decimal  @db.Decimal(18, 2)
  currency  Currency @default(EGP)
  startDate DateTime
  endDate   DateTime

  // Relationships
  userId   String
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts BudgetAccount[]

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete for consistency

  // Indexes
  @@index([userId])
  @@index([userId, startDate, endDate])
  // Map
  @@map("budgets")
}

model BudgetAccount {
  budgetId  String
  accountId String

  // Relationships
  budget  Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Timestamps (for full auditability and consistency)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@id([budgetId, accountId])
  // Map
  @@map("budget_accounts")
}
